{"version":3,"file":"devfractal-ui-api.cjs.development.js","sources":["../src/Components.tsx","../src/useDel.ts","../src/Del.tsx","../src/useGet.ts","../src/Get.tsx","../src/ServerError.tsx","../src/useSubmit.ts","../src/Patch.tsx","../src/PatchReset.tsx","../src/Post.tsx","../src/PostReset.tsx","../src/Put.tsx","../src/PutReset.tsx"],"sourcesContent":["import { useRouter } from 'devfractal-router'\nimport React from 'react'\n\n// @TODO: need a spinner\nexport const Loading: React.FC = () => (\n  <h1 className=\"is-text is-size-1 is-info\">Loading....</h1>\n)\n\n// @TODO: need a nice error view similar to next.js?\nexport const NotFound: React.FC = () => {\n  const { location } = useRouter()\n\n  return <h1>{`path ${location.pathname} did not match any route`}</h1>\n}\n\nexport interface ErrorViewProps {\n  readonly error: Error\n}\n\n// @TODO: This must use server error, if error.response.data is not undefined.\nexport const ErrorView: React.FC<ErrorViewProps> = ({ error }) => (\n  <h1 className=\"is-text is-size-1 is-danger\">{error.message}</h1>\n)\n","import React from 'react'\n\nexport interface DelResult {\n  readonly serverError: string | undefined\n  onClick(): Promise<void>\n}\n\nexport function useDel(\n  asyncFn: () => Promise<void>,\n  onSuccess: () => void,\n  onFailure?: (err: any) => void,\n): DelResult {\n  const [serverError, setServerError] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  async function onClick(): Promise<void> {\n    return asyncFn()\n      .then(onSuccess)\n      .catch(err => {\n        if (err && err.response && err.response.data) {\n          setServerError(err.response.data.error)\n          if (onFailure) {\n            onFailure(err)\n          }\n        } else if (onFailure) {\n          onFailure(err)\n        } else {\n          throw err\n        }\n      })\n  }\n\n  return { serverError, onClick }\n}\n","import React from 'react'\nimport { useDel } from './useDel'\n\nexport interface DelProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  onDel(): Promise<void>\n  onSuccess(): void\n}\n\nexport function Del({\n  onDel,\n  onSuccess,\n  children,\n  ...props\n}: DelProps): JSX.Element {\n  const { serverError, onClick } = useDel(onDel, onSuccess)\n\n  return (\n    <>\n      {serverError && <div className=\"toast\">{serverError}</div>}\n      <button {...props} onClick={onClick}>\n        {children}\n      </button>\n    </>\n  )\n}\n","import React from 'react'\n\nexport type AsyncResult<T> = { refresh(): void } & (\n  | { readonly state: 'none' | 'loading' }\n  | {\n      readonly state: 'success'\n      readonly data: T\n    }\n  | {\n      readonly state: 'failure'\n      readonly error: Error\n    })\n\nexport function useGet<T extends {}, P extends any[]>(\n  asyncFn: (...params: P) => Promise<T>,\n  ...deps: P\n): AsyncResult<T>\nexport function useGet<T extends {}>(asyncFn: () => Promise<T>): AsyncResult<T>\n\n// tslint:disable no-object-mutation readonly-array\nexport function useGet<T extends {}, P extends any[]>(\n  asyncFn: (...params: P | []) => Promise<T>,\n  ...deps: Parameters<typeof asyncFn>\n): AsyncResult<T> {\n  const [data, setData] = React.useState<T | undefined>(undefined)\n  const [error, setError] = React.useState<Error | undefined>(undefined)\n  const [loading, setLoading] = React.useState(false)\n\n  const [fetchAgain, setFetchAgain] = React.useState(0)\n\n  const mounted: React.MutableRefObject<boolean> = React.useRef(false)\n\n  React.useEffect(() => {\n    setLoading(true)\n\n    mounted.current = true\n\n    asyncFn(...deps)\n      .then(data => {\n        if (mounted.current) {\n          setLoading(false)\n          setData(data)\n          setError(undefined)\n        }\n      })\n      .catch(error => {\n        if (mounted.current) {\n          setLoading(false)\n          setError(error)\n        }\n      })\n\n    return () => {\n      mounted.current = false\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [...deps, fetchAgain])\n\n  return {\n    refresh: () => setFetchAgain(count => (count + 1) % 100),\n    ...(data\n      ? { state: 'success', data }\n      : error\n      ? { state: 'failure', error }\n      : { state: loading ? 'loading' : 'none' }),\n  }\n}\n","import React from 'react'\nimport { ErrorView, Loading } from './Components'\nimport { AsyncResult, useGet } from './useGet'\n\n// tslint:disable readonly-array no-unbound-method\nexport interface GetProps<T extends {}, P extends any[]> {\n  readonly deps?: P | []\n  readonly component?: React.FC<{ readonly data: T; fetchAgain?(): void }>\n  // You should pass a global function, not a closure. Pass all deps to 'deps' instead.\n  asyncFn(...params: P): Promise<T>\n  children?(data: T, fetchAgain: () => void): JSX.Element\n}\n\nexport function Get<T extends {}, P extends any[]>({\n  asyncFn,\n  deps = [],\n  component: Component,\n  children,\n}: GetProps<T, P>): JSX.Element {\n  const result: AsyncResult<T> = useGet(asyncFn, ...(deps as P))\n\n  if (result.state === 'failure') {\n    return <ErrorView error={result.error} />\n  }\n\n  if (result.state === 'success') {\n    if (Component) {\n      return <Component data={result.data} fetchAgain={result.refresh} />\n    }\n    if (children) {\n      return children(result.data, result.refresh)\n    }\n    throw new Error('component or children must be provided to Get')\n  }\n\n  return <Loading />\n}\n","import React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { cast, keys } from 'technoidentity-utils'\n\n// tslint:disable typedef\n\nconst SingleError = t.string\nconst Errors = t.readonlyArray(t.string)\n\ninterface ValidationErrors\n  extends Record<\n    string,\n    t.TypeOf<typeof SingleError> | t.TypeOf<typeof Errors> | ValidationErrors\n  > {}\n\nconst ValidationErrors: t.Type<ValidationErrors> = t.recursion(\n  'ValidationErrors',\n  () => t.record(t.string, t.union([SingleError, Errors, ValidationErrors])),\n)\n\nconst ServerErrors = t.union([t.string, SingleError, Errors, ValidationErrors])\ntype ServerErrors = t.TypeOf<typeof ServerErrors>\n\nexport interface ServerErrorViewProps {\n  readonly error?: ServerErrors\n}\n\nfunction serverError(error: ServerErrors): string {\n  cast(ServerErrors, error)\n\n  if (t.string.is(error)) {\n    return error\n  }\n\n  if (SingleError.is(error)) {\n    return error\n  }\n\n  if (Errors.is(error)) {\n    return error.join('\\n')\n  }\n  if (ValidationErrors.is(error)) {\n    return keys(error.validationErrors)\n      .map(k => `${k}: ${serverError(error.validationErrors[k])}`)\n      .join('\\n')\n  }\n  return 'FATAL: unknown server error'\n}\n\nexport const ServerError: React.FC<ServerErrorViewProps> = ({ error }) => (\n  <>\n    {error && (\n      <article className=\"message is-danger\">\n        <div className=\"message-body\">{serverError(error)}</div>\n      </article>\n    )}\n  </>\n)\n","import { useHistory } from 'devfractal-router'\nimport { FormikActions } from 'formik'\nimport { History } from 'history'\nimport React from 'react'\nimport { SubmitAction } from './common'\n\nexport interface SubmitResult<T extends {}> {\n  readonly serverError: string | undefined\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport function useSubmit<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  onSuccess: (values: T, actions: FormikActions<T>) => void,\n  onFailure?: (err: any, actions: FormikActions<T>) => void,\n): SubmitResult<T> {\n  const [serverError, setServerError] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  async function onSubmit(values: T, actions: FormikActions<T>): Promise<void> {\n    return asyncFn(values)\n      .then(values => onSuccess(values, actions))\n      .catch(err => {\n        if (err && err.response && err.response.data) {\n          setServerError(err.response.data.error)\n          if (onFailure) {\n            onFailure(err, actions)\n          }\n        } else if (onFailure) {\n          onFailure(err, actions)\n        } else {\n          throw err\n        }\n      })\n      .finally(() => actions.setSubmitting(false))\n  }\n\n  return { serverError, onSubmit }\n}\n\nexport function useRedirect(): { onRedirect(path?: string): void } {\n  const history: History = useHistory()\n\n  return {\n    onRedirect: (path?: string) => {\n      if (path) {\n        history.push(path)\n      }\n    },\n  }\n}\n\nexport function useSubmitRedirect<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  redirectTo?: string,\n): SubmitResult<T> {\n  const { onRedirect } = useRedirect()\n  return useSubmit(asyncFn, () => onRedirect(redirectTo))\n}\n\nexport function useSubmitReset<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  noReset?: boolean,\n): SubmitResult<T> {\n  return useSubmit(asyncFn, (values, actions) => {\n    actions.setValues(values)\n    if (!noReset) {\n      actions.resetForm()\n    }\n  })\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\n\nexport interface PatchComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PatchProps<T, ID extends keyof T> {\n  readonly redirectTo?: string\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPatch(id: T[ID], values: Partial<T>): Promise<T>\n  readonly component: React.FC<PatchComponentProps<T>>\n}\n\nexport function Patch<T, ID extends keyof T>({\n  id,\n  redirectTo,\n  doGet,\n  onPatch,\n  component: Component,\n}: PatchProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPatch(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitRedirect(update, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PatchResetComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PatchResetProps<T, ID extends keyof T> {\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPatch(id: T[ID], values: Partial<T>): Promise<T>\n  readonly component: React.FC<PatchResetComponentProps<T>>\n}\n\nexport function PatchReset<T, ID extends keyof T>({\n  id,\n  doGet,\n  onPatch,\n  component: Component,\n}: PatchResetProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPatch(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitReset(update)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\nexport interface PostComponentProps<T> {\n  readonly onSubmit: SubmitAction<T>\n}\nexport interface PostProps<T> {\n  readonly redirectTo?: string\n  readonly component: React.FC<PostComponentProps<T>>\n  onPost(values: T): Promise<T>\n}\n\nexport function Post<T>({\n  redirectTo,\n  onPost,\n  component: Component,\n}: PostProps<T>): JSX.Element {\n  const { serverError, onSubmit } = useSubmitRedirect(onPost, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Component onSubmit={onSubmit} />\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PostResetProps<T> {\n  // readonly inlineErrors?: boolean\n  readonly component: React.FC<{ readonly onSubmit: SubmitAction<T> }>\n  onPost(values: T): Promise<T>\n}\n\nexport function PostReset<T>({\n  onPost,\n  component: Component,\n}: PostResetProps<T>): JSX.Element {\n  const { serverError, onSubmit } = useSubmitReset(onPost)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Component onSubmit={onSubmit} />\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\n\nexport interface PutComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PutProps<T, ID extends keyof T> {\n  readonly redirectTo?: string\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPut(id: T[ID], values: T): Promise<T>\n  readonly component: React.FC<PutComponentProps<T>>\n}\n\nexport function Put<T, ID extends keyof T>({\n  id,\n  redirectTo,\n  doGet,\n  onPut,\n  component: Component,\n}: PutProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPut(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitRedirect(update, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PutResetComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PutResetProps<T, ID extends keyof T> {\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPut(id: T[ID], values: T): Promise<T>\n  readonly component: React.FC<PutResetComponentProps<T>>\n}\n\nexport function PutReset<T, ID extends keyof T>({\n  id,\n  doGet,\n  onPut,\n  component: Component,\n}: PutResetProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPut(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitReset(update)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n"],"names":["Loading","React","className","NotFound","useRouter","location","pathname","ErrorView","error","message","useDel","asyncFn","onSuccess","onFailure","onClick","then","err","response","data","setServerError","useState","undefined","serverError","Del","onDel","children","props","useGet","deps","setData","setError","loading","setLoading","fetchAgain","setFetchAgain","mounted","useRef","useEffect","current","refresh","count","state","Get","Component","component","result","Error","SingleError","t","Errors","ValidationErrors","ServerErrors","cast","is","join","keys","validationErrors","map","k","ServerError","useSubmit","onSubmit","values","actions","setSubmitting","useRedirect","history","useHistory","onRedirect","path","push","useSubmitRedirect","redirectTo","useSubmitReset","noReset","setValues","resetForm","Patch","update","onPatch","id","doGet","initial","PatchReset","Post","onPost","PostReset","Put","onPut","PutReset"],"mappings":"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"}
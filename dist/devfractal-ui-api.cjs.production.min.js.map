{"version":3,"file":"devfractal-ui-api.cjs.production.min.js","sources":["../src/Components.tsx","../src/useDel.ts","../src/useGet.ts","../src/Get.tsx","../src/ServerError.tsx","../src/useSubmit.ts","../src/Del.tsx","../src/Patch.tsx","../src/PatchReset.tsx","../src/Post.tsx","../src/PostReset.tsx","../src/Put.tsx","../src/PutReset.tsx"],"sourcesContent":["import { useRouter } from 'devfractal-router'\nimport React from 'react'\n\n// @TODO: need a spinner\nexport const Loading: React.FC = () => (\n  <h1 className=\"is-text is-size-1 is-info\">Loading....</h1>\n)\n\n// @TODO: need a nice error view similar to next.js?\nexport const NotFound: React.FC = () => {\n  const { location } = useRouter()\n\n  return <h1>{`path ${location.pathname} did not match any route`}</h1>\n}\n\nexport interface ErrorViewProps {\n  readonly error: Error\n}\n\n// @TODO: This must use server error, if error.response.data is not undefined.\nexport const ErrorView: React.FC<ErrorViewProps> = ({ error }) => (\n  <h1 className=\"is-text is-size-1 is-danger\">{error.message}</h1>\n)\n","import React from 'react'\n\nexport interface DelResult {\n  readonly serverError: string | undefined\n  onClick(): Promise<void>\n}\n\nexport function useDel(\n  asyncFn: () => Promise<void>,\n  onSuccess: () => void,\n  onFailure?: (err: any) => void,\n): DelResult {\n  const [serverError, setServerError] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  async function onClick(): Promise<void> {\n    return asyncFn()\n      .then(onSuccess)\n      .catch(err => {\n        if (err && err.response && err.response.data) {\n          setServerError(err.response.data.error)\n          if (onFailure) {\n            onFailure(err)\n          }\n        } else if (onFailure) {\n          onFailure(err)\n        } else {\n          throw err\n        }\n      })\n  }\n\n  return { serverError, onClick }\n}\n","import React from 'react'\n\nexport type AsyncResult<T> = { refresh(): void } & (\n  | { readonly state: 'none' | 'loading' }\n  | {\n      readonly state: 'success'\n      readonly data: T\n    }\n  | {\n      readonly state: 'failure'\n      readonly error: Error\n    })\n\nexport function useGet<T extends {}, P extends any[]>(\n  asyncFn: (...params: P) => Promise<T>,\n  ...deps: P\n): AsyncResult<T>\nexport function useGet<T extends {}>(asyncFn: () => Promise<T>): AsyncResult<T>\n\n// tslint:disable no-object-mutation readonly-array\nexport function useGet<T extends {}, P extends any[]>(\n  asyncFn: (...params: P | []) => Promise<T>,\n  ...deps: Parameters<typeof asyncFn>\n): AsyncResult<T> {\n  const [data, setData] = React.useState<T | undefined>(undefined)\n  const [error, setError] = React.useState<Error | undefined>(undefined)\n  const [loading, setLoading] = React.useState(false)\n\n  const [fetchAgain, setFetchAgain] = React.useState(0)\n\n  const mounted: React.MutableRefObject<boolean> = React.useRef(false)\n\n  React.useEffect(() => {\n    setLoading(true)\n\n    mounted.current = true\n\n    asyncFn(...deps)\n      .then(data => {\n        if (mounted.current) {\n          setLoading(false)\n          setData(data)\n          setError(undefined)\n        }\n      })\n      .catch(error => {\n        if (mounted.current) {\n          setLoading(false)\n          setError(error)\n        }\n      })\n\n    return () => {\n      mounted.current = false\n    }\n    /* eslint-disable react-hooks/exhaustive-deps */\n  }, [...deps, fetchAgain])\n\n  return {\n    refresh: () => setFetchAgain(count => (count + 1) % 100),\n    ...(data\n      ? { state: 'success', data }\n      : error\n      ? { state: 'failure', error }\n      : { state: loading ? 'loading' : 'none' }),\n  }\n}\n","import React from 'react'\nimport { ErrorView, Loading } from './Components'\nimport { AsyncResult, useGet } from './useGet'\n\n// tslint:disable readonly-array no-unbound-method\nexport interface GetProps<T extends {}, P extends any[]> {\n  readonly deps?: P | []\n  readonly component?: React.FC<{ readonly data: T; fetchAgain?(): void }>\n  // You should pass a global function, not a closure. Pass all deps to 'deps' instead.\n  asyncFn(...params: P): Promise<T>\n  children?(data: T, fetchAgain: () => void): JSX.Element\n}\n\nexport function Get<T extends {}, P extends any[]>({\n  asyncFn,\n  deps = [],\n  component: Component,\n  children,\n}: GetProps<T, P>): JSX.Element {\n  const result: AsyncResult<T> = useGet(asyncFn, ...(deps as P))\n\n  if (result.state === 'failure') {\n    return <ErrorView error={result.error} />\n  }\n\n  if (result.state === 'success') {\n    if (Component) {\n      return <Component data={result.data} fetchAgain={result.refresh} />\n    }\n    if (children) {\n      return children(result.data, result.refresh)\n    }\n    throw new Error('component or children must be provided to Get')\n  }\n\n  return <Loading />\n}\n","import React from 'react'\nimport * as t from 'technoidentity-utils'\nimport { cast, keys } from 'technoidentity-utils'\n\n// tslint:disable typedef\n\nconst SingleError = t.string\nconst Errors = t.readonlyArray(t.string)\n\ninterface ValidationErrors\n  extends Record<\n    string,\n    t.TypeOf<typeof SingleError> | t.TypeOf<typeof Errors> | ValidationErrors\n  > {}\n\nconst ValidationErrors: t.Type<ValidationErrors> = t.recursion(\n  'ValidationErrors',\n  () => t.record(t.string, t.union([SingleError, Errors, ValidationErrors])),\n)\n\nconst ServerErrors = t.union([t.string, SingleError, Errors, ValidationErrors])\ntype ServerErrors = t.TypeOf<typeof ServerErrors>\n\nexport interface ServerErrorViewProps {\n  readonly error?: ServerErrors\n}\n\nfunction serverError(error: ServerErrors): string {\n  cast(ServerErrors, error)\n\n  if (t.string.is(error)) {\n    return error\n  }\n\n  if (SingleError.is(error)) {\n    return error\n  }\n\n  if (Errors.is(error)) {\n    return error.join('\\n')\n  }\n  if (ValidationErrors.is(error)) {\n    return keys(error.validationErrors)\n      .map(k => `${k}: ${serverError(error.validationErrors[k])}`)\n      .join('\\n')\n  }\n  return 'FATAL: unknown server error'\n}\n\nexport const ServerError: React.FC<ServerErrorViewProps> = ({ error }) => (\n  <>\n    {error && (\n      <article className=\"message is-danger\">\n        <div className=\"message-body\">{serverError(error)}</div>\n      </article>\n    )}\n  </>\n)\n","import { useHistory } from 'devfractal-router'\nimport { FormikActions } from 'formik'\nimport { History } from 'history'\nimport React from 'react'\nimport { SubmitAction } from './common'\n\nexport interface SubmitResult<T extends {}> {\n  readonly serverError: string | undefined\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport function useSubmit<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  onSuccess: (values: T, actions: FormikActions<T>) => void,\n  onFailure?: (err: any, actions: FormikActions<T>) => void,\n): SubmitResult<T> {\n  const [serverError, setServerError] = React.useState<string | undefined>(\n    undefined,\n  )\n\n  async function onSubmit(values: T, actions: FormikActions<T>): Promise<void> {\n    return asyncFn(values)\n      .then(values => onSuccess(values, actions))\n      .catch(err => {\n        if (err && err.response && err.response.data) {\n          setServerError(err.response.data.error)\n          if (onFailure) {\n            onFailure(err, actions)\n          }\n        } else if (onFailure) {\n          onFailure(err, actions)\n        } else {\n          throw err\n        }\n      })\n      .finally(() => actions.setSubmitting(false))\n  }\n\n  return { serverError, onSubmit }\n}\n\nexport function useRedirect(): { onRedirect(path?: string): void } {\n  const history: History = useHistory()\n\n  return {\n    onRedirect: (path?: string) => {\n      if (path) {\n        history.push(path)\n      }\n    },\n  }\n}\n\nexport function useSubmitRedirect<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  redirectTo?: string,\n): SubmitResult<T> {\n  const { onRedirect } = useRedirect()\n  return useSubmit(asyncFn, () => onRedirect(redirectTo))\n}\n\nexport function useSubmitReset<T extends {}>(\n  asyncFn: (formValues: T) => Promise<T>,\n  noReset?: boolean,\n): SubmitResult<T> {\n  return useSubmit(asyncFn, (values, actions) => {\n    actions.setValues(values)\n    if (!noReset) {\n      actions.resetForm()\n    }\n  })\n}\n","import React from 'react'\nimport { useDel } from './useDel'\n\nexport interface DelProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  onDel(): Promise<void>\n  onSuccess(): void\n}\n\nexport function Del({\n  onDel,\n  onSuccess,\n  children,\n  ...props\n}: DelProps): JSX.Element {\n  const { serverError, onClick } = useDel(onDel, onSuccess)\n\n  return (\n    <>\n      {serverError && <div className=\"toast\">{serverError}</div>}\n      <button {...props} onClick={onClick}>\n        {children}\n      </button>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\n\nexport interface PatchComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PatchProps<T, ID extends keyof T> {\n  readonly redirectTo?: string\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPatch(id: T[ID], values: Partial<T>): Promise<T>\n  readonly component: React.FC<PatchComponentProps<T>>\n}\n\nexport function Patch<T, ID extends keyof T>({\n  id,\n  redirectTo,\n  doGet,\n  onPatch,\n  component: Component,\n}: PatchProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPatch(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitRedirect(update, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PatchResetComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PatchResetProps<T, ID extends keyof T> {\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPatch(id: T[ID], values: Partial<T>): Promise<T>\n  readonly component: React.FC<PatchResetComponentProps<T>>\n}\n\nexport function PatchReset<T, ID extends keyof T>({\n  id,\n  doGet,\n  onPatch,\n  component: Component,\n}: PatchResetProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPatch(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitReset(update)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\nexport interface PostComponentProps<T> {\n  readonly onSubmit: SubmitAction<T>\n}\nexport interface PostProps<T> {\n  readonly redirectTo?: string\n  readonly component: React.FC<PostComponentProps<T>>\n  onPost(values: T): Promise<T>\n}\n\nexport function Post<T>({\n  redirectTo,\n  onPost,\n  component: Component,\n}: PostProps<T>): JSX.Element {\n  const { serverError, onSubmit } = useSubmitRedirect(onPost, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Component onSubmit={onSubmit} />\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PostResetProps<T> {\n  // readonly inlineErrors?: boolean\n  readonly component: React.FC<{ readonly onSubmit: SubmitAction<T> }>\n  onPost(values: T): Promise<T>\n}\n\nexport function PostReset<T>({\n  onPost,\n  component: Component,\n}: PostResetProps<T>): JSX.Element {\n  const { serverError, onSubmit } = useSubmitReset(onPost)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Component onSubmit={onSubmit} />\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitRedirect } from './useSubmit'\n\nexport interface PutComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PutProps<T, ID extends keyof T> {\n  readonly redirectTo?: string\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPut(id: T[ID], values: T): Promise<T>\n  readonly component: React.FC<PutComponentProps<T>>\n}\n\nexport function Put<T, ID extends keyof T>({\n  id,\n  redirectTo,\n  doGet,\n  onPut,\n  component: Component,\n}: PutProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPut(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitRedirect(update, redirectTo)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n","import React from 'react'\nimport { SubmitAction } from './common'\nimport { Get } from './Get'\nimport { ServerError } from './ServerError'\nimport { useSubmitReset } from './useSubmit'\n\nexport interface PutResetComponentProps<T> {\n  readonly initial?: T\n  readonly onSubmit: SubmitAction<T>\n}\n\nexport interface PutResetProps<T, ID extends keyof T> {\n  readonly id: T[ID]\n  doGet(id: T[ID]): Promise<T>\n  onPut(id: T[ID], values: T): Promise<T>\n  readonly component: React.FC<PutResetComponentProps<T>>\n}\n\nexport function PutReset<T, ID extends keyof T>({\n  id,\n  doGet,\n  onPut,\n  component: Component,\n}: PutResetProps<T, ID>): JSX.Element {\n  async function update(data: T): Promise<T> {\n    return onPut(id, data)\n  }\n\n  const { serverError, onSubmit } = useSubmitReset(update)\n\n  return (\n    <>\n      <ServerError error={serverError} />\n      <Get asyncFn={doGet} deps={[id]}>\n        {(data: T) => <Component initial={data} onSubmit={onSubmit} />}\n      </Get>\n    </>\n  )\n}\n"],"names":["Loading","React","className","ErrorView","error","message","useDel","asyncFn","onSuccess","onFailure","useState","undefined","setServerError","serverError","onClick","then","err","response","data","useGet","deps","setData","setError","loading","setLoading","fetchAgain","setFetchAgain","mounted","useRef","useEffect","current","refresh","count","state","Get","Component","component","children","result","Error","SingleError","t","Errors","ValidationErrors","ServerErrors","ServerError","cast","is","join","keys","validationErrors","map","k","useSubmit","onSubmit","values","actions","setSubmitting","useRedirect","history","useHistory","onRedirect","path","push","useSubmitRedirect","redirectTo","useSubmitReset","noReset","setValues","resetForm","onDel","props","useRouter","location","pathname","id","doGet","onPatch","initial","onPost","onPut"],"mappings":"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"}